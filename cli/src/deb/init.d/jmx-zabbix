#!/bin/sh
#
# jmx-zabbix
#
# chkconfig: - 80 05
# description: Load jmx metrics periodically and push to zabbix in a row
#

### BEGIN INIT INFO
# Provides:          jmx-zabbix
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Load jmx metrics periodically and push to zabbix in a row
# Short-Description: Load jmx metrics periodically and push to zabbix in a row
### END INIT INFO

set -e

SCRIPT_NAME=`basename $0`

[ -f /etc/default/$SCRIPT_NAME ] && . /etc/default/$SCRIPT_NAME

test -x $DAEMON || exit 0

RETVAL=0
PATH=/sbin:/usr/sbin:/bin:/usr/bin
ROTATE_SUFFIX=
PID_FILE=/var/run/$NAME/pid

. /lib/lsb/init-functions
. /lib/init/vars.sh

ensure_pid_dir () {
    PID_DIR=`dirname ${PID_FILE}`
    if [ ! -d ${PID_DIR} ] ; then
        mkdir -p ${PID_DIR}
        chown -R ${USER}:${GROUP} ${PID_DIR}
        chmod 755 ${PID_DIR}
    fi
    if [ ! -d ${LOG_DIR} ]; then
        mkdir -p ${LOG_DIR}
        chown -R ${USER}:${GROUP} ${LOG_DIR}
        chmod 755 ${LOG_DIR}
    fi
}

remove_pid () {
    rm -f ${PID_FILE}
    rmdir `dirname ${PID_FILE}` || :
}

start_worker () {
    ensure_pid_dir
    start-stop-daemon --start --quiet --pidfile $PID_FILE \
        --chuid ${USER} --background --make-pidfile \
        --exec ${DAEMON} -- ${DAEMON_OPTIONS}
}

stop_worker () {
    start-stop-daemon --stop --quiet --pidfile ${PID_FILE} --oknodo
}

status_worker () {
    cat ${PID_FILE}
}

restart_worker() {
    stop_worker
    sleep 1
    start_worker
}

start_stop_end() {
    case "$RETVAL" in
        0)
            log_end_msg 0;;
        3)
            log_warning_msg "${DESC} already ${1}"
            log_end_msg 0;;
        *)
            log_warning_msg "FAILED - check ${LOG_DIR}/startup_\{log, _err\}"
            log_end_msg 1;;
    esac
}

case "$1" in
    start)
        log_daemon_msg "Starting ${DESC}" $NAME
        start_worker
        start_stop_end "started"
        ;;
    stop)
        log_daemon_msg "Stopping ${DESC}" $NAME
        stop_worker
        start_stop_end "stopped"
        ;;
    status)
        status_worker
        ;;
    restart)
        log_daemon_msg "Restarting ${DESC}" $NAME
        restart_worker
        start_stop_end "restarted"
        ;;
    force-reload)
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart}" >&2
        RETVAL=1
        ;;
esac

exit $RETVAL
